##
# Project: HipRMC
#
# File: Makefile
# Created: January 27, 2013
# Modified: Jan 27, 2013
#
# Author: Abhinav Sarje <asarje@lbl.gov>
##

USE_GPU = n
USE_MPI = y

## base directories
BOOST_DIR = /usr/common/usg/boost/1.51/gnu
#MPI_DIR = /usr/local/openmpi-1.6
#HDF5_DIR = /usr/local/hdf5-1.8.9
#Z_DIR = /usr/local/zlib-1.2.7
#SZ_DIR = /usr/local/szip-2.1
TIFF_DIR = /global/homes/a/asarje/local/tiff-4.0.2-hopper
#OPENCV_DIR = /global/homes/a/asarje/local/opencv-2.4.3-hopper
#WOO_DIR = /global/homes/a/asarje/lib
ifeq ($(USE_GPU), y)
CUDA_DIR =
FFTW_DIR =
else
CUDA_DIR =
FFTW_DIR = /opt/fftw/3.3.0.1/x86_64
endif

## compilers
CXX = CC
ifeq ($(USE_GPU), y)
NVCC =
else
NVCC =
endif


## compiler flags
CXX_FLAGS = -std=c++0x -fopenmp #-lgomp -v #-Wall -Wextra
## gnu c++ compilers >= 4.3 support -std=c++0x [requirement for hipgisaxs 4.3.x <= g++ <= 4.6.x]
## gnu c++ compilers >= 4.7 also support -std=c++11, but they are not supported by cuda

## boost
BOOST_INCL = -I $(BOOST_DIR)/include -I /global/homes/a/asarje/local/boost_1_49_0
BOOST_LIBS = -L $(BOOST_DIR)/lib -lboost_system -lboost_filesystem -lboost_timer -lboost_chrono

## mpi (openmpi)
#MPI_INCL = -I $(MPI_DIR)/include
#MPI_LIBS = -L $(MPI_DIR)/lib -lmpi_cxx -lmpi

## cuda
ifeq ($(USE_GPU), y)
CUDA_INCL = -I$(CUDA_DIR)/include
CUDA_LIBS = -L$(CUDA_DIR)/lib64 -lcudart -lcufft
NVCC_FLAGS = -Xcompiler -fPIC -Xcompiler -fopenmp -m 64
NVCC_FLAGS += -gencode arch=compute_20,code=sm_20
NVCC_FLAGS += -gencode=arch=compute_20,code=compute_20
NVCC_FLAGS += -gencode arch=compute_20,code=sm_21
NVCC_FLAGS += -gencode arch=compute_30,code=sm_30
NVCC_FLAGS += -gencode arch=compute_35,code=sm_35
#NVCC_FLAGS += -Xptxas -v -Xcompiler -v -Xlinker -v --ptxas-options="-v"
NVLIB_FLAGS = -Xlinker -lgomp
NVLIB_FLAGS += -Wl,-rpath -Wl,$(CUDA_DIR)/lib64
else
CUDA_INCL =
CUDA_LIBS =
NVCC_FLAGS =
endif

## libtiff
TIFF_INCL = -I$(TIFF_DIR)/include
TIFF_LIBS = -L$(TIFF_DIR)/lib -ltiff -lz

## opencv
#OPENCV_INCL = -I$(OPENCV_DIR)/include
#OPENCV_LIBS = -Bdynamic -L$(OPENCV_DIR)/lib -lopencv_core -lopencv_highgui -lopencv_imgproc

## woo
#WOO_INCL = -I $(WOO_DIR)

## fftw
ifeq ($(USE_GPU), y)
FFTW_INCL =
FFTW_LIBS =
else
FFTW_INCL = -I $(FFTW_DIR)/include
FFTW_LIBS = -L $(FFTW_DIR)/lib -lfftw3
endif

## gsl
GSL_INCL = -I$(GSL_DIR)/include
GSL_LIBS = -L$(GSL_DIR)/lib -Wl,--no-as-needed -lgsl -lgslcblas -lm

## miscellaneous
MISC_INCL =
ifeq ($(USE_GPU), y)
MISC_FLAGS = -DUSE_GPU
else
MISC_FLAGS =
endif

MISC_FLAGS += -DUSE_DFT
MISC_FLAGS += -DUSE_MODEL_INPUT		# this enables input to be model and computes fft -- for debug/testing

## choose optimization levels, debug flags, gprof flag, etc
OPT_FLAGS = -g #-DDEBUG #-v #-pg
OPT_FLAGS += -O3 -DNDEBUG #-v

## choose single or double precision here
#PREC_FLAG =			# leave empty for single precision
PREC_FLAG = -DDOUBLEP	# define this for double precision

ifeq ($(USE_MPI), y)
MPI_FLAG = -DUSE_MPI
endif


## all includes
ALL_INCL = $(OPENCV_INCL) $(WOO_INCL) $(CUDA_INCL) $(FFTW_INCL) $(BOOST_INCL) $(TIFF_INCL) $(GSL_INCL)

## all libraries
ALL_LIBS = $(CUDA_LIBS) $(FFTW_LIBS) $(BOOST_LIBS) $(TIFF_LIBS) $(GSL_LIBS) $(MPI_LIBS) $(OPENCV_LIBS)

## all flags
ALL_FLAGS = $(OPT_FLAGS) $(CXX_FLAGS) $(PREC_FLAG) $(MPI_FLAG) $(MISC_FLAGS)


PREFIX = $(PWD)
BINARY_SIM = hiprmc
BIN_DIR = $(PREFIX)/bin
OBJ_DIR = $(PREFIX)/obj
SRC_DIR = $(PREFIX)/src

## all objects
OBJECTS_SIM = hiprmc.o rmc.o tile.o image.o utilities.o tile_scale.o hiprmc_input.o read_oo_input.o \
			  tile_autotuner.o
ifeq ($(USE_GPU), y)
OBJECTS_SIM += cutile.o
endif

## the main binary
OBJ_BIN_SIM = $(patsubst %,$(OBJ_DIR)/%,$(OBJECTS_SIM))

$(BINARY_SIM): $(OBJ_BIN_SIM)
	$(CXX) -o $(BIN_DIR)/$@ $^ $(ALL_FLAGS) $(ALL_LIBS)


BINARY_SCALE = hiprmc-scale
OBJECTS_SCALE = testscale.o tile.o tile_scale.o utilities.o image.o
OBJ_BIN_SCALE = $(patsubst %,$(OBJ_DIR)/%,$(OBJECTS_SCALE))

$(BINARY_SCALE): $(OBJ_BIN_SCALE)
	$(CXX) -o $(BIN_DIR)/$@ $^ $(ALL_FLAGS) $(ALL_LIBS)

$(OBJ_DIR)/tile_scale.o: $(SRC_DIR)/tile_scale.cpp $(SRC_DIR)/tile.hpp
	$(CXX) -c $< -o $@ $(ALL_FLAGS) $(ALL_INCL)
	
$(OBJ_DIR)/testscale.o: $(SRC_DIR)/testscale.cpp $(SRC_DIR)/rmc.hpp
	$(CXX) -c $< -o $@ $(ALL_FLAGS) $(ALL_INCL)
	

## c++ compilation
_DEPS_CXX = %.hpp
DEPS_CXX = $(patsubst %,$(SRC_DIR)/%,$(_DEPS_CXX))

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp $(DEPS_CXX)
	$(CXX) -c $< -o $@ $(ALL_FLAGS) $(ALL_INCL)
	
_DEPS_WIL = wil/%.hpp
DEPS_WIL = $(patsubst %,$(SRC_DIR)/wil/%,$(_DEPS_CXX))

$(OBJ_DIR)/%.o: $(SRC_DIR)/wil/%.cpp $(DEPS_WIL)
	$(CXX) -c $< -o $@ $(ALL_FLAGS) $(ALL_INCL)
	
$(OBJ_DIR)/hiprmc.o: $(SRC_DIR)/hiprmc.cpp $(SRC_DIR)/rmc.hpp
	$(CXX) -c $< -o $@ $(ALL_FLAGS) $(ALL_INCL)

ifeq ($(USE_GPU), y)
$(OBJ_DIR)/cutile.o: $(SRC_DIR)/tile.cu
	$(NVCC) -c $< -o $@ $(ALL_FLAGS) $(NVCC_FLAGS) $(ALL_INCL)
endif

all: $(BINARY_SIM)


## compute fft tool

BINARY_COMPUTE_FFT = compute-fft
OBJECTS_COMPUTE_FFT = generate.o utilities.o image.o
OBJ_BIN_COMPUTE_FFT = $(patsubst %,$(OBJ_DIR)/%,$(OBJECTS_COMPUTE_FFT))

computefft: $(BINARY_COMPUTE_FFT)

$(BINARY_COMPUTE_FFT): $(OBJ_BIN_COMPUTE_FFT)
	$(CXX) -o $(BIN_DIR)/$@ $^ $(ALL_FLAGS) $(ALL_LIBS)

$(OBJ_DIR)/generate.o: $(SRC_DIR)/generate.cpp
	$(CXX) -c $< -o $@ $(ALL_FLAGS) $(ALL_INCL)

BINARY_LOADING = compute-loading
OBJECTS_LOADING = compute_loading.o utilities.o image.o
OBJ_BIN_LOADING = $(patsubst %,$(OBJ_DIR)/%,$(OBJECTS_LOADING))

computeloading: $(BINARY_LOADING)

$(BINARY_LOADING): $(OBJ_BIN_LOADING)
	$(CXX) -o $(BIN_DIR)/$@ $^ $(ALL_FLAGS) $(ALL_LIBS)

$(OBJ_DIR)/compute_loading.o: $(SRC_DIR)/compute_loading.cpp
	$(CXX) -c $< -o $@ $(ALL_FLAGS) $(ALL_INCL)


.PHONY: clean

clean:
	rm -f $(OBJ_BIN_SIM) $(BIN_DIR)/$(BINARY_SIM)

.PHONY: cleanall

cleanall:
	rm -f $(OBJ_BIN_SIM) $(BIN_DIR)/$(BINARY_SIM) \
		$(OBJ_BIN_COMPUTE_FFT) $(BIN_DIR)/$(BINARY_COMPUTE_FFT) \
		$(OBJ_BIN_LOADING) $(BIN_DIR)/$(BINARY_LOADING)
